import React, { useState } from 'react';
import {
  Box,
  Paper,
  IconButton,
  Typography,
  Button
} from '@mui/material';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { useQuery, useMutation, useQueryClient } from 'react-query';
import toast from 'react-hot-toast';
import { FaRegCircleCheck, FaRegCircleXmark } from 'react-icons/fa6';
import axios from '@/services/axios';
import BackdropLoading from '@/components/BackdropLoading';
import Error from '@/components/Error';

export default function HSE() {
  const queryClient = useQueryClient();
  const [filter, setFilter] = useState('abertos'); 

  const { isLoading, error, data, refetch } = useQuery('visitas', () =>
    axios.get('/visitantes/consulta_hse').then((r) => r.data)
  );

  const updateapv = useMutation(
    (apv) => axios.put(`/visitantes/separacao_hse/${apv.uuid}`, apv),
    {
      onSuccess: () => {
        toast.success('Atualizado com sucesso');
        refetch();  
      },
      onError: (error) => {
        toast.error(`Erro ao atualizar: ${error.message}`);
      },
    }
  );

  const handleApprove = (row) => {
    if (filter === 'abertos') {
      updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Separado', devolvidos_hse: '' });
    } else {
      updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Separado', devolvidos_hse: 'Devolvido' });
    }
  };

  const handleReject = (row) => {
    if (filter === 'abertos') {
      updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Não separado', devolvidos_hse: '' });
    } else {
      updateapv.mutate({ uuid: row.uuid, separacao_hse: 'Separado', devolvidos_hse: 'Não devolvido' });
    }
  };

  if (isLoading) return <BackdropLoading />;
  if (error) return <Error error={error.response.data} />;

  const todayStart = new Date();
  todayStart.setHours(0, 0, 0, 0); 

  const filteredData = (data || [])
    .filter((row) => {
      const visitDate = new Date(row.data_visita);
      return visitDate >= todayStart;
    })
    .filter((row) => {
      if (
        row.fone_disponibilidade === 'proprio' &&
        row.oculos_disponibilidade === 'proprio' &&
        row.sapato_disponibilidade === 'proprio'
      ) {
        return false; 
      }

      if (filter === 'abertos') {
        return row.separacao_hse !== 'Separado';
      } else if (filter === 'concluidos') {
        return row.separacao_hse === 'Separado';
      }
      return true;
    })
    .sort((a, b) => {
      const da = new Date(a.data_visita);
      const db = new Date(b.data_visita);
      if (da < db) return -1; 
      if (da > db) return 1;
      return 0; 
    });

  const commonStyles = {
    px: 2,
    borderRadius: 10,
    fontWeight: 'bold',
    color: 'white',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: 45,
    mt: 0.4,
    boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
  };

  function StyleStatus(Status) {
    switch (Status) {
      case 'Separado':
        return { ...commonStyles, bgcolor: '#28a745' };
      case 'Não separado':
        return { ...commonStyles, bgcolor: '#dc3545' };
      case 'Pendente':
        return { ...commonStyles, bgcolor: '#ffc107' };
      case 'Devolvido':
        return { ...commonStyles, bgcolor: '#4682B4' };
      case 'Não devolvido':
        return { ...commonStyles, bgcolor: '#A0522D' };
      default:
        return { ...commonStyles, bgcolor: '#ffc107' };
    }
  }

  const columns = [
    {
      field: 'separacao_hse',
      headerName: 'Status',
      width: 170,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ row }) => (
        <Box sx={StyleStatus(row.separacao_hse)}>
          {row.separacao_hse || 'Pendente'}
        </Box>
      ),
    },
    //  só em concluidos
    ...(filter === 'concluidos'
      ? [{
          field: 'devolvidos_hse',
          headerName: 'Devolvido',
          width: 170,
          align: 'center',
          headerAlign: 'center',
          renderCell: ({ row }) => (
            <Box sx={StyleStatus(row.devolvidos_hse)}>
              {row.devolvidos_hse || 'Pendente'}
            </Box>
          ),
        }]
      : []),
    {
      field: 'separacoes_hse',
      headerName: 'Separações',
      width: 125,
      align: 'center',
      headerAlign: 'center',
      sortable: false,
      filterable: false,
      renderCell: ({ row }) => (
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 0.5, mt: 1 }}>
          <IconButton color="primary" size="small" onClick={() => handleApprove(row)}>
            <FaRegCircleCheck size={24} />
          </IconButton>
          <IconButton color="error" size="small" onClick={() => handleReject(row)}>
            <FaRegCircleXmark size={26} />
          </IconButton>
        </Box>
      ),
    },
    { field: 'nome_completo', headerName: 'Visitante', width: 200, align: 'center', headerAlign: 'center' },
    {
      field: 'data_visita',
      headerName: 'Data Visita',
      width: 175,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ value }) => {
        if (!value) return '';
        const dt = new Date(value);
        if (isNaN(dt)) return '';
        return dt.toLocaleDateString('pt-BR') + ' ' + dt.toLocaleTimeString('pt-BR');
      },
    },
    { field: 'solicitante', headerName: 'Solicitante', width: 140, align: 'center', headerAlign: 'center' },
    {
      field: 'epi',
      headerName: 'EPI',
      width: 100,
      align: 'center',
      headerAlign: 'center',
      renderCell: ({ value }) => (value === 1 ? 'Sim' : 'Não'),
    },
    { field: 'fone_disponibilidade', headerName: 'Fone Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'oculos_disponibilidade', headerName: 'Óculos Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'sapato_disponibilidade', headerName: 'Sapato Disponibilidade', width: 180, align: 'center', headerAlign: 'center' },
    { field: 'sapato_tamanho', headerName: 'Sapato Tamanho', type: 'number', width: 140, align: 'center', headerAlign: 'center' },
    { field: 'observacoes', headerName: 'Observações', width: 200, align: 'center', headerAlign: 'center' },
  ];

  return (
    <Box sx={{ width: '100%' }}>
      <Typography variant="h4" sx={{ mb: -3 }}>
        Controle epi hse
      </Typography>

      <Box sx={{ display: 'flex', marginBottom: 1, gap: 2, height: 55, mt: 5 }}>
        <Button
          variant="contained"
          sx={{ backgroundColor: '#2eb872', borderRadius: 3, width: 170, fontSize: 13 }}
          onClick={() => setFilter('abertos')}
        >
          Abertos
        </Button>
        <Button
          variant="contained"
          sx={{ backgroundColor: '#761a1a', borderRadius: 3, width: 170, fontSize: 13 }}
          onClick={() => setFilter('concluidos')}
        >
          Separados
        </Button>
      </Box>

      <Paper elevation={3} sx={{ height: 800, borderRadius: 2, overflow: 'hidden', mt: 2 }}>
        <DataGrid
          rows={filteredData}
          columns={columns}
          getRowId={(row) => row.uuid}
          initialState={{ pagination: { paginationModel: { pageSize: 13 } } }}
          pageSizeOptions={[5]}
          disableRowSelectionOnClick
          slots={{ toolbar: GridToolbar }}
          slotProps={{
            toolbar: {
              showQuickFilter: true,
              quickFilterProps: { debounceMs: 300 },
            },
          }}
          sx={{
            '.MuiDataGrid-columnHeaders': { backgroundColor: '#FFCCCC', color: '#333' },
            '.MuiDataGrid-row:hover': { backgroundColor: '#f5f5f5' },
            '.MuiDataGrid-cell': { borderBottom: '1px solid #ddd' },
            '.MuiDataGrid-footerContainer': { backgroundColor: '#f7f7f7' },
          }}
        />
      </Paper>
    </Box>
  );
}
