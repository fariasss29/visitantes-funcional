import { Router } from "express";
import conn from '@/db/conn';
import { check_user } from '@/services/check_user';
import { v4 as uuidv4 } from 'uuid';

export const atualizacao_visitantes = Router();

atualizacao_visitantes.put(
  '/visitantes/visitas-cadastradas/:uuid',
  async (req, res, next) => {


    const { uuid } = req.params;
    const {
      nome_completo,
      documento,
      data_visita,
      solicitante,
      motivo,
      empresa,
      notebook,
      epi,
      foto,
      estacionamento,
      fabrica,
      observacoes,
      fone_disponibilidade,
      oculos_disponibilidade,
      sapato_disponibilidade,
      sapato_tamanho,
      status_agendamento
    } = req.body;


    try {
      const sql = `
          UPDATE visitantes_registro
          SET
            nome_completo          = ?,
            documento              = ?,
            data_visita            = ?,
            solicitante            = ?,
            motivo                 = ?,
            empresa                = ?,
            notebook               = ?,
            epi                    = ?,
            foto                   = ?,
            estacionamento         = ?,
            fabrica                = ?,
            observacoes            = ?,
            fone_disponibilidade   = ?,
            oculos_disponibilidade = ?,
            sapato_disponibilidade = ?,
            sapato_tamanho         = ?,
            status_agendamento     = ?
          WHERE uuid = ?
        `;

      const [result] = await conn.query(sql, [
        nome_completo,
        documento,
        data_visita,
        solicitante,
        motivo,
        empresa,
        notebook,
        epi,
        foto,
        estacionamento,
        fabrica,
        observacoes,
        fone_disponibilidade,
        oculos_disponibilidade,
        sapato_disponibilidade,
        sapato_tamanho,
        status_agendamento,
        uuid
      ]);

      if (result.affectedRows === 0) {
        return res.status(404).send({ msg: 'Visitante não encontrado' });
      }

      res.status(200).send({ message: 'Atualizado com sucesso' });
    } catch (err) {
        console.log(err)
      next(err);
    }
  }
);


atualizacao_visitantes.put('/visitantes/aprovacao/:uuid', async (req, res, next) => {
  const { uuid } = req.params;
  const { status } = req.body;

  try {

    const sql1 = `
        UPDATE visitantes_registro
        SET status = ?
        WHERE uuid = ?
      `;
    const [upd] = await conn.query(sql1, [status, uuid]);
    if (upd.affectedRows === 0) {
      return res.status(404).send({ msg: 'Visita não encontrada' });
    }

    const [[visit]] = await conn.query(
      `SELECT nome_completo, solicitante, motivo
         FROM visitantes_registro
         WHERE uuid = ?`,
      [uuid]
    );
    if (!visit) {
      return res.status(404).send({ msg: 'Dados para aprovador não encontrados' });
    }

    const { nome_completo, solicitante, motivo } = visit;

    const [exists] = await conn.query(
      `SELECT 1 FROM visitantes_aprovadores WHERE uuid = ?`,
      [uuid]
    );

    res.status(200).send({ message: 'Status sincronizado com sucesso' });
  } catch (err) {
    next(err);
  }
});



atualizacao_visitantes.put('/visitantes/separacao_hse/:uuid', async (req, res, next) => {
  const { uuid } = req.params;
  const { separacao_hse, devolvidos_hse } = req.body;  

  try {
    const sql = `
      UPDATE visitantes_registro
      SET separacao_hse = ?, 
      devolvidos_hse = ?
      WHERE uuid = ?
    `;
    const [result] = await conn.query(sql, [
      separacao_hse,
      devolvidos_hse,  
      uuid
    ]);

    if (result.affectedRows === 0) {
      return res.status(404).send({ msg: 'Visitante não encontrado' });
    }

    console.log('Dados recebidos para atualização de separação HSE:', req.body);
    res.status(200).send({ message: 'Atualizado com sucesso' });
  } catch (err) {
    next(err);
  }
});



export default atualizacao_visitantes;
